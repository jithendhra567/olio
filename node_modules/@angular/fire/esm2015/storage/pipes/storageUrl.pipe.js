import { AsyncPipe } from '@angular/common';
import { ChangeDetectorRef, NgModule, Pipe } from '@angular/core';
import { AngularFireStorage } from '../storage';
/** to be used with in combination with | async */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../storage';
export class GetDownloadURLPipe {
    constructor(storage, cdr) {
        this.storage = storage;
        this.asyncPipe = new AsyncPipe(cdr);
    }
    transform(path) {
        if (path !== this.path) {
            this.path = path;
            this.downloadUrl$ = this.storage.ref(path).getDownloadURL();
        }
        return this.asyncPipe.transform(this.downloadUrl$);
    }
    ngOnDestroy() {
        this.asyncPipe.ngOnDestroy();
    }
}
GetDownloadURLPipe.ɵfac = function GetDownloadURLPipe_Factory(t) { return new (t || GetDownloadURLPipe)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.AngularFireStorage), ɵngcc0.ɵɵinjectPipeChangeDetectorRef()); };
GetDownloadURLPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "getDownloadURL", type: GetDownloadURLPipe, pure: false });
/** @nocollapse */
GetDownloadURLPipe.ctorParameters = () => [
    { type: AngularFireStorage },
    { type: ChangeDetectorRef }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(GetDownloadURLPipe, [{
        type: Pipe,
        args: [{
                name: 'getDownloadURL',
                pure: false
            }]
    }], function () { return [{ type: ɵngcc1.AngularFireStorage }, { type: ɵngcc0.ChangeDetectorRef }]; }, null); })();
export class GetDownloadURLPipeModule {
}
GetDownloadURLPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: GetDownloadURLPipeModule });
GetDownloadURLPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function GetDownloadURLPipeModule_Factory(t) { return new (t || GetDownloadURLPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(GetDownloadURLPipeModule, { declarations: [GetDownloadURLPipe], exports: [GetDownloadURLPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(GetDownloadURLPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [GetDownloadURLPipe],
                exports: [GetDownloadURLPipe]
            }]
    }], null, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RvcmFnZVVybC5waXBlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvc3RvcmFnZS9waXBlcy9zdG9yYWdlVXJsLnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzVDLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxRQUFRLEVBQWEsSUFBSSxFQUFpQixNQUFNLGVBQWUsQ0FBQztBQUU1RixPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFFaEQsa0RBQWtEOzs7QUFLbEQsTUFBTSxPQUFPLGtCQUFrQjtBQUFHLElBTWhDLFlBQW9CLE9BQTJCLEVBQUUsR0FBc0I7QUFDekUsUUFEc0IsWUFBTyxHQUFQLE9BQU8sQ0FBb0I7QUFBQyxRQUM5QyxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ3hDLElBQUUsQ0FBQztBQUNILElBQ0UsU0FBUyxDQUFDLElBQVk7QUFDeEIsUUFBSSxJQUFJLElBQUksS0FBSyxJQUFJLENBQUMsSUFBSSxFQUFFO0FBQzVCLFlBQU0sSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7QUFDdkIsWUFBTSxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLGNBQWMsRUFBRSxDQUFDO0FBQ2xFLFNBQUs7QUFDTCxRQUFJLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO0FBQ3ZELElBQUUsQ0FBQztBQUNILElBQ0UsV0FBVztBQUNiLFFBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztBQUNqQyxJQUFFLENBQUM7QUFDSDs4Q0F6QkMsSUFBSSxTQUFDLGtCQUNKLElBQUksRUFBRSxnQkFBZ0Isa0JBQ3RCLElBQUksRUFBRSxLQUFLLGVBQ1o7a0hBQ0k7QUFBQztBQUFtQjtBQUE0QyxZQVA1RCxrQkFBa0I7QUFBSSxZQUZ0QixpQkFBaUI7QUFBRzs7Ozs7Ozt1SEFBRTtBQXFDL0IsTUFBTSxPQUFPLHdCQUF3QjtBQUFHO29EQUp2QyxRQUFRLFNBQUMsa0JBQ1I7TUFBWSxFQUFFLENBQUUsa0JBQWtCLENBQUUsa0JBQ3BDLE9BQU8sRUFBRSxDQUFFLGtCQUFrQixDQUFFLGVBQ2hDOzs7Ozs7OzswQkFDSTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXN5bmNQaXBlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IENoYW5nZURldGVjdG9yUmVmLCBOZ01vZHVsZSwgT25EZXN0cm95LCBQaXBlLCBQaXBlVHJhbnNmb3JtIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBBbmd1bGFyRmlyZVN0b3JhZ2UgfSBmcm9tICcuLi9zdG9yYWdlJztcblxuLyoqIHRvIGJlIHVzZWQgd2l0aCBpbiBjb21iaW5hdGlvbiB3aXRoIHwgYXN5bmMgKi9cbkBQaXBlKHtcbiAgbmFtZTogJ2dldERvd25sb2FkVVJMJyxcbiAgcHVyZTogZmFsc2UsXG59KVxuZXhwb3J0IGNsYXNzIEdldERvd25sb2FkVVJMUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0sIE9uRGVzdHJveSB7XG5cbiAgcHJpdmF0ZSBhc3luY1BpcGU6IEFzeW5jUGlwZTtcbiAgcHJpdmF0ZSBwYXRoOiBzdHJpbmc7XG4gIHByaXZhdGUgZG93bmxvYWRVcmwkOiBPYnNlcnZhYmxlPGFueT47XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBzdG9yYWdlOiBBbmd1bGFyRmlyZVN0b3JhZ2UsIGNkcjogQ2hhbmdlRGV0ZWN0b3JSZWYpIHtcbiAgICB0aGlzLmFzeW5jUGlwZSA9IG5ldyBBc3luY1BpcGUoY2RyKTtcbiAgfVxuXG4gIHRyYW5zZm9ybShwYXRoOiBzdHJpbmcpIHtcbiAgICBpZiAocGF0aCAhPT0gdGhpcy5wYXRoKSB7XG4gICAgICB0aGlzLnBhdGggPSBwYXRoO1xuICAgICAgdGhpcy5kb3dubG9hZFVybCQgPSB0aGlzLnN0b3JhZ2UucmVmKHBhdGgpLmdldERvd25sb2FkVVJMKCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmFzeW5jUGlwZS50cmFuc2Zvcm0odGhpcy5kb3dubG9hZFVybCQpO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy5hc3luY1BpcGUubmdPbkRlc3Ryb3koKTtcbiAgfVxuXG59XG5cbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9uczogWyBHZXREb3dubG9hZFVSTFBpcGUgXSxcbiAgZXhwb3J0czogWyBHZXREb3dubG9hZFVSTFBpcGUgXSxcbn0pXG5leHBvcnQgY2xhc3MgR2V0RG93bmxvYWRVUkxQaXBlTW9kdWxlIHt9XG4iXX0=