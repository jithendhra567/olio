{"version":3,"file":"ngx-wow.umd.js","sources":["../../tmp/wow.module.ts","../../tmp/models/wow-config.ts","../../tmp/services/window.service.ts","../../tmp/services/wow.service.ts"],"names":["NgModule","CommonModule","Injectable","Subject"],"mappings":";;;;;;;;;;AAAA;AAAQ;AAAkC;AAAQ;AACX;AAEf;wDAKvBA,WAAQ;OAAC,0BACR,OAAO,EAAE,8BACPC,mBAAY,0BACb;AACF;;;;;;;;;;gDACa;AAAC,2BAbf;AAAE;AAAU;AAAC;AAAQ;AAAsC;AAClB;AAEzC;AAAQ;AAAoD;ACA5D;AAAa;AAGiB;AAAQ,IAHtC;AAGS;AAAkC;AAAgB;AAKvB;AAAgB,4BAHvC,KAAK;AAClB;AAES;AAEI;AACb,gCADiB,UAAU;AAC3B;AAES;AACU;AAKjB;AAAgB,0BAHP,CAAC;AACZ;AAES;AAEI;AAGR,0BAHM,IAAI;AACf;AAES;AAEI;AAGN,wBAHE,IAAI;AACb;AAEG,2BAhCH;AAAE,QAqCD;AACA;AAAC;AAAQ;AAAsC;AAA6C;AAAQ;AAAC;AAAQ;AAAsC;AAA6C;ACtCjM;AAAQ;AAGE;AAAQ;AAGZ;AAEU;AAAU,QAExB,sBAAI,uCAAY;AAAI;AACV;AAIF;AAAgB,YALxB;AAAc,gBACZ,OAAO,OAAO,EAAE,CAAC;AACrB,aAAG;AACF;AAE2B;AACE,WAJ3B,AAJW;yDAHbC,aAAU,SAAC,0BACV,UAAU,EAAE,MAAM,uBACnB,lJACc;;;;;;;;gDAS6B;AAAC,4BAjB7C;AAAE;AAAU;AAAQ;AAAmB;AAErC,IAaF;AAAqB;AAC6B,QAChD,OAAO,OAAO,MAAM,KAAK,WAAW,GAAG,MAAM,GAAG,SAAS,CAAC;AAC5D,KAAC;AACD;AAAC;AAAQ;AAAsC;AAA6C;ACnB5F;AACS,QA8BP,uBAAY,aAA4B;AAC1C;AACQ,YAAJ,IAAI,CAAC,kBAAkB,GAAG,IAAIC,YAAO,EAAe,CAAC;AACzD;AACQ,YAAJ,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,kBAAkB,CAAC,YAAY,EAAE,CAAC;AAChE,YACI,IAAI,CAAC,MAAM,GAAG,aAAa,CAAC,YAAY,CAAC;AAC7C,SAAG;AACH;AACW;AACR;AAAuB;AAAY,QADpC,4BAAI;AAAO;AACR;AAAuB;AAAY,QADtC,UAAK,MAAqB;AAAI,YAA9B,iBASC;AACH,YATI,IAAI,IAAI,CAAC,MAAM,EAAE;AAAE;AACP,gBAAV,qBAAM,SAAS,GAAG,MAAM,IAAI,EAAE,CAAC;AACrC;AACU,gBAAJ,SAAS,CAAC,QAAQ,GAAG,cAAM,OAAA,KAAI,CAAC,kBAAkB,CAAC,IAAI,EAAE,GAAA,CAAC;AAChE;AAES,gBAAH,IAAI,GAAG,CAAC,SAAS,CAAC,CAAC,IAAI,EAAE,CAAC;AAChC,aAAK;AACL,SAAG,CA5BW;AAAC;8BAHdD,aAAU,SAAC,pDAKA;gBAJV,UAAU,EAAE,MAAM,lCAOQ,oBAtBnB,aAAa;AAAK;KAgB1B,LAhBwC;;;;;;;;uEASC;AAAC,4BAb3C;AAAE;AAAU;AAAC;AAAQ;AACN;AAEA;AAAQ;AAAC;AAAQ;AACV;AAGV;AAAQ;AAAC;AAAQ;AAE7B;AACyB;AAAQ;AAAC;AAEJ;AACK;AAEd;AAIZ;AAAC;AAKP;AAAC;AAAM","sourcesContent":["import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { WindowService, NgwWowService } from './services/index';\n\n/**\n * Main module of the library\n */\n@NgModule({\n  imports: [\n    CommonModule\n  ]\n})\nexport class NgwWowModule {\n}\n","/**\n * Configuration for the NgwWowService service.\n */\nexport class NgwWowConfig {\n\n  /**\n   * Class name that reveals the hidden box when user scrolls.\n   */\n  boxClass?= 'wow';\n\n  /**\n   * Class name that triggers the CSS animations ('animated' by default for the animate.css library)\n   */\n  animateClass?= 'animated';\n\n  /**\n   * Define the distance between the bottom of browser viewport and the top of hidden box.\n   * When the user scrolls and reach this distance the hidden box is revealed.\n   */\n  offset?= 0;\n\n  /**\n   * Turn on/off WOW.js on mobile devices.\n   */\n  mobile?= true;\n\n  /**\n   * Consatantly check for new WOW elements on the page.\n   */\n  live?= true;\n\n  /**\n   * Callback called when the given box element is shown.\n   */\n  callback?: (box: HTMLElement) => void;\n\n  scrollContainer?: string;\n}\n","import { Injectable } from '@angular/core';\n\n/**\n * Service to interact with the window object.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class WindowService {\n\n  get nativeWindow(): Window {\n    return _window();\n  }\n}\n\nfunction _window(): Window {\n  // Return the global native browser window object\n  return typeof window !== 'undefined' ? window : undefined;\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\n\nimport { NgwWowConfig } from '../models/index';\nimport { WindowService } from './window.service';\n\n/**\n * Type definition for the `WOW` object from `WOW.js` library.\n */\ndeclare class WOW {\n  constructor (config?: NgwWowConfig);\n  /**\n   * Initializes the WOW.js library\n   * @param config the custom configuration to use\n   */\n  init(config?: NgwWowConfig): void;\n};\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NgwWowService {\n\n  // Window Object\n  private window: Window;\n\n  // Observable  source that emits the box that is about to be shown by WOW\n  private itemRevealedSource: Subject<HTMLElement>;\n  // Observable users can subscribed to, in order to be notified when the box element is about to be shown by WOW\n  itemRevealed$: Observable<HTMLElement>;\n\n  constructor(windowService: WindowService) {\n    // Observable  source\n    this.itemRevealedSource = new Subject<HTMLElement>();\n    // Observable  stream\n    this.itemRevealed$ = this.itemRevealedSource.asObservable();\n\n    this.window = windowService.nativeWindow;\n  }\n\n  init(config?: NgwWowConfig): void {\n    if (this.window) { // For Angular Universal suport\n      const wowConfig = config || {};\n      // Set callback hook:\n      wowConfig.callback = () => this.itemRevealedSource.next();\n\n      // Initializes the library\n      new WOW(wowConfig).init();\n    }\n  }\n\n}\n"]}